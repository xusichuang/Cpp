

// STL（Standard Template Library，标准模板库)
// STL从广义上分为：容器(container)、算法、迭代器(iterator)
// 容器和算法直接通过迭代器无缝连接
// STL几乎所有代码都采用了模板类或模板函数

// STL六大组件
// 1.容器
// 2.算法
// 3.迭代器
// 4.仿函数
// 5.适配器(配接器)
// 6.空间配置器


// 容器：各种数据结构，如vector、list、deque、set、map等，用来存放数据
// 算法：各种常用的算法，如sort、find、copy、for_each等
// 迭代器：扮演了容器与算法直接的胶合剂
// 仿函数：类似函数，课作为算法的某种策略
// 适配器：一种用来修饰容器或者仿函数或者迭代器接口的东西
// 空间配置器：负责空间的配置与管理




// 容器分为  序列式容器  和  关联式容器
// 序列式容器：强调值的排序，序列式容器每个元素均有固定的位置（顺序关系）
// 关联式容器：二叉树结构，各元素之间没有严格的物理上的顺序关系

// 算法分为 质变算法和非质变算法
// 质变算法：指运算过程中会更改区间内的元素内容。如拷贝、替换、删除等
// 非质变算法：指运算过程中不会更改区间内的元素内容，例如查找、计数、遍历、寻找极值等


// 迭代器提供一种方法，使之能够依序寻访某个容器所含的各个元素，而无需暴露该容器的内部表示方式
// 每个容器都有自己专属的迭代器
// 迭代器使用非常类似指针

// 迭代器种类
//1.输入迭代器  对数据的只读访问                      支持++、==、！=
//2.输出迭代器  对数据的只写访问                      支持++
//3.前向迭代器  读写操作，并能向前推进迭代器          支持++、 == 、！ =
//4.双向迭代器  读写操作，并能向前和向后操作          支持++、--
//5.随机迭代器  读写操作，可以跳跃式访问任意数据      支持++、--、[n]、-n、<、<=、>、>=
//              功能最强的迭代器
//
//常用的迭代器 种类为  双向迭代器和  随机访问迭代器