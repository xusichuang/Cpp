#include<iostream>
using namespace std;

// 容器在使用时都要包含头文件
// 包含vector头文件
#include<vector>
// 标准算法头文件
#include<algorithm>

// vector皴法内置数据类型
// 容器：vector
// 算法：for_each
// 迭代器vector<int>::iterator


void myPrint(int val)
{
	cout << val << endl;
}

void test021()
{
	vector<int> v;

	// 向容器中插入数据
	v.push_back(10);
	v.push_back(20);
	v.push_back(30);
	v.push_back(40);
	v.push_back(50);

	// 通过迭代器访问容器中的数据
	// 起始迭代器，指向容器中第一个元素
	vector<int>::iterator itBegin = v.begin();
	// 结束迭代器，指向容器中最后一个元素的下一个位置！！！
	vector<int>::iterator itEnd = v.end();


	// 访问数据方式
	// 第一种
	while (itBegin!=itEnd)
	{
		// *itBegin获取其中的值
		cout << *itBegin << endl;
		itBegin++;
	}

	cout << "-------------------------------------" << endl;

	// 第二种
	for (vector<int>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << *it << endl;
	}

	cout << "-------------------------------------" << endl;
	// 第三种，利用STL提供的遍历算法  必须包含头文件#include<algorithm>
	// 这里利用了回调， 直接查看定义
	for_each(v.begin(), v.end(), myPrint);
}

int main02()
{
	test021();
	return 0;
}